{"version":3,"sources":["components/Square/Square.js","components/Time/Time.js","mocks/squares.js","helpers/timeHelper.js","helpers/binaryHelper.js","components/Clock/Clock.js","App.js","serviceWorker.js","index.js"],"names":["Square","on","column","row","number","gridRow","lit","className","Time","children","id","getTime","fn","time","Date","getHours","getMinutes","getSeconds","addZeroPrefix","slice","timeToBinary","digitRows","reduce","acc","curr","index","bin","bits","length","addZeroPrefixBits","toString","split","Clock","delay","digitPerRows","timeoutId","state","binary","tick","setTimeout","hours","minutes","seconds","setState","this","clearTimeout","map","b","key","squares","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ddfbfe3.chunk.js","sourcesContent":["import React from \"react\";\n\nimport './Square.css';\n\nexport default function Square({on, column, row, number}) {\n    const gridRow = row ? ` grid__row-${row}` : \"\";\n    const lit = on ? \" Clock__Square--lit\" : \"\";\n\n    return <span className={`Clock__Square grid__column-${column}${gridRow}${lit}`}>\n            {on && number}\n        </span>\n};","import React from \"react\";\n\nimport './Time.css';\n\nexport default function Time({children}) {\n    return <span className=\"Time\">{children}</span>\n};","export default [\n    {\n        id: 1,\n        column: 1,\n        row: 3,\n        number: 2\n    },\n    {\n        id: 2,\n        column: 1,\n        row: 4,\n        number: 1\n    },\n    {\n        id: 3,\n        column: 2,\n        number: 8\n    },\n    {\n        id: 4,\n        column: 2,\n        number: 4\n    },\n    {\n        id: 5,\n        column: 2,\n        number: 2\n    },\n    {\n        id: 6,\n        column: 2,\n        number: 1\n    },\n    {\n        id: 7,\n        column: 3,\n        row: 2,\n        number: 4\n    },\n    {\n        id: 8,\n        column: 3,\n        row: 3,\n        number: 2\n    },\n    {\n        id: 9,\n        column: 3,\n        row: 4,\n        number: 1\n    },\n    {\n        id: 10,\n        column: 4,\n        number: 8\n    },\n    {\n        id: 11,\n        column: 4,\n        number: 4\n    },\n    {\n        id: 12,\n        column: 4,\n        number: 2\n    },\n    {\n        id: 13,\n        column: 4,\n        number: 1\n    },\n    {\n        id: 14,\n        column: 5,\n        row: 2,\n        number: 4\n    },\n    {\n        id: 15,\n        column: 5,\n        row: 3,\n        number: 2\n    },\n    {\n        id: 16,\n        column: 5,\n        row: 4,\n        number: 1\n    },\n    {\n        id: 17,\n        column: 6,\n        number: 8\n    },\n    {\n        id: 18,\n        column: 6,\n        number: 4\n    },\n    {\n        id: 19,\n        column: 6,\n        number: 2\n    },\n    {\n        id: 20,\n        column: 6,\n        number: 1\n    }\n];","import {addZeroPrefixBits, getBinary} from \"./binaryHelper\";\n\nexport const getTime = fn => {\n    const time = new Date();\n    const hours = fn(time.getHours());\n    const minutes = fn(time.getMinutes());\n    const seconds = fn(time.getSeconds());\n    \n    return [hours, minutes, seconds];\n};\n\nexport const addZeroPrefix = time => ('0' + time).slice(-2);\n\nexport const timeToBinary = (time, digitRows) => {\n    return digitRows.reduce((acc, curr, index) => {\n        return acc += addZeroPrefixBits(getBinary(time[index]), curr)\n    }, \"\").split(\"\");\n};","export const getBinary = digit => (digit >>> 0).toString(2);\n\nexport const addZeroPrefixBits = (bin, bits) => {\n    while (bin.length < bits) bin = \"0\" + bin;\n\n    return bin;\n};","import React from 'react';\n\nimport './Clock.css';\n\nimport Square from \"../Square/Square\";\nimport Time from \"../Time/Time\";\n\nimport squares from \"../../mocks/squares\";\n\nimport {getTime, addZeroPrefix, timeToBinary} from \"../../helpers/timeHelper\";\n\nexport default class Clock extends React.Component {\n    delay = 1000;\n    digitPerRows = [2, 4, 3, 4, 3, 4];\n    timeoutId = null;\n\n    state = {\n        time: null,\n        binary: []\n    };\n\n    tick = () => {\n        return setTimeout(() => {\n            const [hours, minutes, seconds] = getTime(addZeroPrefix);\n\n            this.setState(() => ({\n                time: `${hours}:${minutes}:${seconds}`,\n                binary: timeToBinary(hours + minutes + seconds, this.digitPerRows)\n            }));\n        }, this.delay);\n    };\n\n    componentDidMount() {\n        this.timeoutId = this.tick();\n    }\n\n    componentDidUpdate() {\n        this.timeoutId = this.tick();\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timeoutId);\n    }\n\n    render() {\n        const{binary, time} = this.state;\n\n        return (\n            <div className=\"Clock\">\n                {binary.map((b, index) => (\n                        <Square on={b === \"1\"} key={squares[index].id}\n                                column={squares[index].column} row={squares[index].row}\n                                number={squares[index].number}\n                        />\n                    )\n                )}\n                <Time>{time}</Time>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport './App.css';\n\nimport Clock from \"./components/Clock/Clock\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Clock/>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}